set nocompatible               " Be iMproved

" Startup {{{======================
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

" release autogroup in MyVimrc {{{
augroup MyVimrc
  autocmd!
augroup END
command! -nargs=* Autocmd autocmd MyVimrc <args>
command! -nargs=* AutocmdFT autocmd MyVimrc FileType <args>

Autocmd VimEnter,ColorScheme *vimrc nested highlight def link myVimAutocmd vimAutoCmd
Autocmd VimEnter,WinEnter,BufWinEnter *vimrc nested syntax match vimAutoCmd /\<\(Autocmd\|AutocmdFT\)\>/
"}}}

" Echo startup time on start {{{
if has('vim_starting') && has('reltime')
  " Shell: vim --startuptime filename -q; vim filename
  " vim --cmd 'profile start profile.txt' --cmd 'profile file $HOME/.vimrc' +q && vim profile.txt
  let s:startuptime = reltime()
    " autocmd MyVimrc VimEnter * let s:startuptime = reltime(s:startuptime) | redraw
    Autocmd VimEnter * let s:startuptime = reltime(s:startuptime) | redraw
    \ | echomsg 'startuptime: ' . reltimestr(s:startuptime)
endif
"}}}
"}}}

"===============================================================================
"                                  NeoBundle                                   "
"===============================================================================
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc', {
 \ 'build' : {
 \     'windows' : 'make -f make_mingw32.mak',
 \     'cygwin' : 'make -f make_cygwin.mak',
 \     'mac' : 'make -f make_mac.mak',
 \     'unix' : 'make -f make_unix.mak',
 \    },
 \ }

filetype plugin indent on     " Required!
set autoindent
syntax enable

NeoBundle 'Lokaltog/vim-easymotion'

" Code Completation
" NeoBundle 'Valloric/YouCompleteMe'
NeoBundleLazy 'Shougo/neocomplete.vim'

" Snippet
" NeoBundle 'SirVer/ultisnips'
NeoBundleLazy 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'

" Themes
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'sjl/badwolf'
NeoBundle 'tomasr/molokai'
NeoBundle 'vim-scripts/Wombat'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'vim-scripts/twilight'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'jpo/vim-railscasts-theme'
NeoBundle 'vim-scripts/rdark'
NeoBundle 'djjcast/mirodark'
NeoBundle 'altercation/vim-colors-solarized'

" Python
NeoBundleLazy 'davidhalter/jedi-vim'
" NeoBundle 'heavenshell/vim-pydocstring'

" Editing
NeoBundle 'scrooloose/nerdcommenter'
NeoBundleLazy 'godlygeek/tabular'

"Unite
NeoBundle 'Shougo/unite.vim'
NeoBundleLazy 'Shougo/unite-outline'
NeoBundleLazy 'Shougo/neomru.vim'

" Search
NeoBundle 'rking/ag.vim'
NeoBundleLazy 'osyo-manga/vim-anzu'
" NeoBundle 'osyo-manga/vim-over' " :substitute preview

" File browsing
NeoBundle 'scrooloose/nerdtree'

" Git
NeoBundle 'tpope/vim-fugitive'

" Dash in OS X
NeoBundle 'rizzatti/funcoo.vim'
NeoBundle 'rizzatti/dash.vim'

" Status line
" NeoBundle 'bling/vim-airline' " So much faster than Powerline! :)
NeoBundle 'itchyny/lightline.vim'

" Filetypes
NeoBundle 'chrisbra/csv.vim'

" Syntax Checking
NeoBundleLazy 'scrooloose/syntastic'

" Keyboard shortcuts
NeoBundle 'tpope/vim-unimpaired'

" Installation check.
NeoBundleCheck


" Basic Options
filetype plugin indent on     " Required!
syntax enable
set matchtime=2 " Show matching brackets for a short time 

" Cursorline {{{
" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au InsertLeave * set cursorline
    au WinEnter * call MyWindowEnterHilight()
augroup END

function! MyWindowEnterHilight() " {{{ Fix for preview will window set cursorline 
  let currentmode = mode()
  if currentmode != 'i'
      set cursorline
  endif
endfunction " }}} 
" }}}

" Resize splits when the window is resized
au VimResized * :wincmd =

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
    \ | wincmd p | diffthis
endif

" Setup tabs
set tabstop=8 expandtab shiftwidth=4 softtabstop=4
set smarttab
set formatoptions=qrn1j
set textwidth=80
set colorcolumn=+1

set fcs=vert:│
" set ambiwidth=double
set noshowmode

" Always splits to the right and below
set splitright
set splitbelow

set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

" Show trailing whitespaces

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
Autocmd BufWinEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
Autocmd InsertEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+\%#\@<!$/ | endif
Autocmd InsertLeave * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
Autocmd BufWinLeave * if &modifiable && &ft!='unite' | call clearmatches() | endif

" Auto complete setting
set completeopt=menuone,longest

set wildmode=list:full
set wildmenu "turn on wild menu
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*DS_Store*
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.pyc

" Minimal number of screen lines to keep above and below the cursor
set scrolloff=10

" Leader keys
let mapleader=","
inoremap jk <ESC>
nmap <silent> <leader>d <Plug>DashSearch " Search in Dash.app
nnoremap <leader><space> :noh<cr>:AnzuClearSearchStatus<cr> " Clean search highlight
" <Leader>tab: Toggles NERDTree
nnoremap <silent> <Leader><tab> :NERDTreeToggle<cr>
"  <Leader>n: NERDTreeFind
nnoremap <silent> <Leader>n :NERDTreeFind<cr> :wincmd p<cr>
" <Leader>cd: Switch to the directory of the open buffer
nnoremap <Leader>cd :cd %:p:h<cr>:pwd<cr>
" <Leader>p: Switch to previous split
nnoremap <Leader>p <C-w>p

" Search
set incsearch
set hlsearch
set ignorecase
set smartcase
set showmatch
nnoremap <tab> %
vnoremap <tab> %

" Wrapping
command! -nargs=* Wrap set wrap linebreak nolist
set relativenumber

" List
nmap <leader>l :set list!<CR>
set nolist
set listchars=tab:▸\ ,extends:❯,precedes:❮,nbsp:␣
set showbreak=…

" Splitting
nnoremap <leader>w <C-w>v<C-w>l
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Allow changing buffer without saving it first
set hidden

" Backups {{{

set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}

set t_Co=256
" Setup Themes
if has("gui_running")
    set background=dark
    colorscheme jellybeans
    hi statusline guibg=#403C41 "Fix white statusline in V split mode
    hi ColorColumn term=reverse ctermbg=16 guibg=#1C1C1C
else
    set background=dark
    colorscheme jellybeans
    hi statusline guibg=#403C41 "Fix white statusline in V split mode
    hi ColorColumn term=reverse ctermbg=16 guibg=#1C1C1C
endif

"================
" Status Line
"================
set laststatus=2   " Always show the statusline
" let g:airline_powerline_fonts = 1
" lightline.vim {{{
if neobundle#tap('lightline.vim')
    " lightline setting {{{
    let g:lightline = {
        \ 'colorscheme': 'jellybeans',
        \ 'mode_map': {
        \   'n' : 'N',
        \   'i' : 'I',
        \   'R' : 'R',
        \   'v' : 'V',
        \   'V' : 'V-L',
        \   'c' : 'COMMAND',
        \   "\<C-v>": 'V-B',
        \   's' : 'SELECT',
        \   'S' : 'S-L',
        \   "\<C-s>": 'S-B',
        \   '?': '      '
        \ },
        \ 'active': {
        \   'left': [
        \       [ 'mode', 'paste' ],
        \       [ 'fugitive','filename', 'anzu' ],
        \   ],
        \   'right': [
        \       [ 'lineinfo' ],
        \       [ 'percent' ],
        \       [ 'relativepath', 'filetype', 'syntastic' ],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \   'anzu': 'anzu#search_status',
        \   'absolutepath': 'MyAbsolutepath',
        \   'relativepath': 'MyRelativepath',
        \ },
        \ 'component_expand': {
        \   'syntastic': 'SyntasticStatuslineFlag',
        \ },
        \ 'component_type': {
        \   'syntastic': 'error',
        \ }
        \ }
  "}}}

  let g:syntastic_mode_map = { 'mode': 'passive' }

  augroup AutoSyntastic
  autocmd!
    autocmd BufWritePost *.py,*.c,*.cpp call s:syntastic()
  augroup END

  function! s:syntastic()
    SyntasticCheck
    call lightline#update()
  endfunction

  function! neobundle#tapped.hooks.on_source(bundle) "{{{
    let g:unite_force_overwrite_statusline=0
    let g:vimfiler_force_overwrite_statusline=0
    let g:vimshell_force_overwrite_statusline=0
  endfunction "}}}

  function! MyModified() "{{{
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction "}}}

  function! MyReadonly() "{{{
    return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
  endfunction "}}}

  function! MyFilename() "{{{
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
          \  &ft == 'unite' ? unite#get_status_string() :
          \  &ft == 'vimshell' ? vimshell#get_status_string() :
          \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != MyModified() ? ' ' . MyModified() : '')
  endfunction "}}}

  function! MyFugitive() "{{{
    try
      if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
        let _ = fugitive#head()
        return strlen(_) ? '⭠ '._ : ''
      endif
    catch
    endtry
    return ''
  endfunction "}}}

  function! MyFileformat() "{{{
    return winwidth('.') > 70 ? &fileformat : ''
  endfunction "}}}

  function! MyFiletype() "{{{
    return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
  endfunction "}}}

  function! MyFileencoding() "{{{
    return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
  endfunction "}}}

  function! MyMode()
    let fname = expand('%:t')
    return fname == '__Tagbar__' ? 'Tagbar' :
          \ fname == 'ControlP' ? 'CtrlP' :
          \ fname == '__Gundo__' ? 'Gundo' :
          \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
          \ fname =~ 'NERD_tree' ? 'NERDTree' :
          \ &ft == 'unite' ? 'Unite' :
          \ &ft == 'vimfiler' ? 'VimFiler' :
          \ &ft == 'vimshell' ? 'VimShell' :
          \ winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! MyAbsolutepath() "{{{
      return winwidth('.') > 70 ? expand('%:p') : ''
  endfunction "}}}

  function! MyRelativepath() "{{{
      return winwidth('.')/3 > len(expand('%:h')) ? expand('%:h') : ''
  endfunction "}}}

  call neobundle#untap()
endif
"}}}

"===============================================================================
" NERDCommenter
"===============================================================================

" Always leave a space between the comment character and the comment
let NERDSpaceDelims=1

" Shougo/unite.vim"{{{
if neobundle#tap('unite.vim')
    " Config"{{{
    call neobundle#config({
        \   'depends': ['Shougo/vimproc'],
        \   'autoload' : {
        \     'commands' : [
        \       {
        \         'name' : 'Unite',
        \         'complete' : 'customlist,unite#complete_source'
        \       },
        \       'UniteWithCursorWord',
        \       'UniteWithInput'
        \     ]
        \   }
        \ })"}}}

    " Settings"{{{
    function! neobundle#tapped.hooks.on_source(bundle)
        let g:unite_kind_jump_list_after_jump_scroll=0
        let g:unite_enable_start_insert = 0
        let g:unite_source_rec_min_cache_files = 1000
        let g:unite_source_rec_max_cache_files = 5000
        let g:unite_prompt = '❯ '
        let g:unite_enable_start_insert = 1
        let g:unite_source_history_yank_enable = 1
        let g:unite_split_rule = "botright"
        let g:unite_update_time = 200
        let g:unite_cursor_line_highlight = 'TabLineSel'
        " Open plugin directory by t
        call unite#custom#alias('directory', 'tabopen', 'tabvimfiler')
        " Use the fuzzy matcher for everything
        " call unite#filters#matcher_default#use(['matcher_fuzzy'])
        " Use the rank sorter for everything
        call unite#filters#sorter_default#use(['sorter_rank'])
    endfunction "}}}

    " Unite {{{
    nnoremap [unite] <Nop>
    xnoremap [unite] <Nop>
    nmap <space> [unite]
    xmap <space> [unite]

    " General fuzzy search
    nnoremap <silent> [unite]<space> :<C-u>Unite
          \ -buffer-name=files buffer file_mru bookmark file_rec/async<CR>
    " Restore Unite
    nnoremap <silent> [unite]r :<C-u>UniteResume<CR>
    " Quick registers
    nnoremap <silent> [unite]R :<C-u>Unite -buffer-name=register register<CR>
    " Buffer
    nnoremap <silent> [unite]b :<C-u>Unite -silent buffer file_mru bookmark<CR>
    " Source
    nnoremap <silent> [unite]u :<C-u>Unite
          \ source -vertical -silent -start-insert<CR>
    " Quick file search
    nnoremap <silent> [unite]f :<C-u>Unite
          \ -buffer-name=files file_rec/async file/new<CR>
    " File List
    nnoremap <silent> [unite]F :<C-u>UniteWithBufferDir
          \ -silent -buffer-name=files file<CR>
    " Quick outline
    nnoremap <silent> [unite]o :<C-u>Unite
          \ -silent -winwidth=40 -buffer-name=outline -vertical outline<CR>
    " Quick buffer and mru
    nnoremap <silent> [unite]u :<C-u>Unite -buffer-name=buffers buffer file_mru<CR>
    " Quick sessions (projects)
    nnoremap <silent> [unite]p :<C-u>Unite -buffer-name=sessions session<CR>
    " Quick sources
    nnoremap <silent> [unite]a :<C-u>Unite -buffer-name=sources source<CR>
    " Quick snippet
    nnoremap <silent> [unite]s :<C-u>Unite -buffer-name=snippets neosnippet<CR>
    " Quickly switch lcd
    nnoremap <silent> [unite]d :<C-u>Unite
          \ -buffer-name=change-cwd -default-action=lcd directory_mru<CR>
    " Quick grep from cwd
    nnoremap <silent> [unite]g :<C-u>Unite
          \ -buffer-name=grep -no-start-insert grep:.<CR>
    " Quick help
    nnoremap <silent> [unite]h :<C-u>Unite -buffer-name=help help<CR>
    " Quick line using the word under cursor
    nnoremap <silent> [unite]l :<C-u>UniteWithCursorWord
          \ -buffer-name=search_file line<CR>
    " Line
    nnoremap <silent> g/ :<C-u>Unite -buffer-name=search line -start-insert -no-quit<CR>
    " Quick MRU search
    nnoremap <silent> [unite]m :<C-u>Unite -buffer-name=mru file_mru<CR>
    " Show Mapping List
    nnoremap <silent> [unite]M :<C-u>Unite -silent mapping<CR>
    " Quick find
    nnoremap <silent> [unite]n :<C-u>Unite -buffer-name=find find:.<CR>
    " Quick commands
    nnoremap <silent> [unite]c :<C-u>Unite -buffer-name=commands command<CR>
    " Show Message
    nnoremap <silent> [unite]e :<C-u>Unite -silent output:message<CR>
    " Jump (mnemonic : <C-o> jump to Older cursor position)
    nnoremap <silent> [unite]<C-o> :<C-u>Unite -silent change jump<CR>
    " Yank history
    nnoremap <silent> [unite]y :<C-u>Unite -silent history/yank<CR>
    "-Unite Plugin Settings--------------"{{{
    " Fold
    nnoremap <silent> [unite]z :<C-u>Unite -silent fold -vertical -winwidth=40 -no-start-insert<CR>
    "}}}
    "}}}

    call neobundle#untap()
endif
"}}}

" Use ag for search

if executable('ag')
  " Use ag in unite grep source.
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
  \ '--line-numbers --nocolor --nogroup --hidden --ignore ' .
  \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
  let g:unite_source_grep_recursive_opt = ''
elseif executable('pt')
  " Use pt in unite grep source.
  " https://github.com/monochromegane/the_platinum_searcher
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
elseif executable('ack-grep')
  " Use ack in unite grep source.
  let g:unite_source_grep_command = 'ack-grep'
  let g:unite_source_grep_default_opts =
  \ '--no-heading --no-color -a -H'
  let g:unite_source_grep_recursive_opt = ''
endif
" }}}

" Shougo/unite-outline {{{
if neobundle#tap('unite-outline')
    call neobundle#config({
        \   'autoload' : {
        \     'unite_sources' : [
        \       'outline'
        \     ],
        \   }
        \ })
    call neobundle#untap()
endif
"}}}

" Shuogo/neomru {{{
if neobundle#tap('neomru.vim')
    call neobundle#config({
        \   'autoload' : {
        \     'unite_sources' : [
        \       'file_mru',
        \       'directory_mru'
        \     ],
        \   }
        \ })
    function! neobundle#tapped.hooks.on_source(bundle)
      let g:neomru#file_mru_limit = 1000
      let g:neomru#filename_format = ":~:."
      let g:neomru#time_format = ''
    endfunction

    call neobundle#untap()
endif
"}}}
"===============================================================================
" YCM
"===============================================================================
" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_add_preview_to_completeopt = 1

" Ultisnips

" let g:UltiSnipsExpandTrigger="<c-j>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" function! g:UltiSnips_Complete()

    " call UltiSnips_ExpandSnippet()
    " if g:ulti_expand_res == 0
        " if pumvisible()
            " return "\<C-n>"
        " else
            " call UltiSnips_JumpForwards()
            " if g:ulti_jump_forwards_res == 0
               " return "\<TAB>"
            " endif
        " endif
    " endif
    " return ""
" endfunction

" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" let g:UltiSnipsExpandTrigger               <tab>
" let g:UltiSnipsListSnippets                <c-tab>
" let g:UltiSnipsJumpForwardTrigger          <c-j>
" let g:UltiSnipsJumpBackwardTrigger         <c-k>

"===============================================================================
" Fugitive
"===============================================================================

nnoremap <Leader>gb :Gblame<cr>
nnoremap <Leader>gc :Gcommit<cr>
nnoremap <Leader>gd :Gdiff<cr>
nnoremap <Leader>gp :Git push<cr>
nnoremap <Leader>gr :Gremove<cr>
nnoremap <Leader>gs :Gstatus<cr>
nnoremap <Leader>gw :Gwrite<cr>
" Quickly stage, commit, and push the current file. Useful for editing .vimrc
nnoremap <Leader>gg :Gwrite<cr>:Gcommit -m 'update'<cr>:Git push<cr>

"===============================================================================
" NERDTree
"===============================================================================

let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\~$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr', '\.pyc']

" Use command-line window {{{
nnoremap : q:
vnoremap : q:

Autocmd CmdwinEnter * call s:init_cmdwin()
function! s:init_cmdwin() "{{{
  silent! 1,$-20 delete _
  " silent! 1,$-20 delete
  call cursor('$', 0)

  let b:neocomplete_sources_list = ['vim_complete']

  nnoremap <silent><buffer>q          :<C-u>quit<CR>
  nnoremap <silent><buffer><CR>       <CR>
  inoremap <silent><buffer><expr><CR> pumvisible() ? "\<C-y>\<CR>" : "\<CR>"
  nnoremap <silent><buffer><TAB>      :<C-u>quit<CR>

  nnoremap <silent><buffer><Space> <CR>q:
  nnoremap <silent><buffer>;;      <CR>q:
  inoremap <silent><buffer>;;      <CR>q:

  " Completion.
  inoremap <silent><buffer><expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <silent><buffer><expr><C-p>  pumvisible() ? "\<C-p>" : "\<C-o>0\<UP>"
  inoremap <silent><buffer><expr><C-n>  pumvisible() ? "\<C-n>" : "\<C-o>0\<DOWN>"

  startinsert!
endfunction "}}}
"}}}

" Shougo/neocomplete.vim"{{{
if neobundle#tap('neocomplete.vim')
  call neobundle#config({
        \   'autoload' : {
        \     'insert' : 1,
        \   }
        \ })
  function! neobundle#tapped.hooks.on_source(bundle)
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      return neocomplete#close_popup() . "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()

    AutocmdFT python setlocal omnifunc=jedi#completions
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif
    let g:neocomplete#force_omni_input_patterns.python =
    \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

    let g:neocomplete#enable_auto_close_preview = 0

  endfunction
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  call neobundle#untap()
endif
"}}}

" jedi-vim {{{
if neobundle#tap('jedi-vim')
  call neobundle#config({
        \ "autoload": {
        \   "filetypes": ["python", "python3", "djangohtml"],
        \ },
        \ "build": {
        \   "mac": "pip install jedi",
        \   "unix": "pip install jedi",
        \ }})
  function! neobundle#tapped.hooks.on_source(bundle) "{{{
    " Disable setup completeopt
    let g:jedi#auto_vim_configuration = 0
    " Manually set completeopt
    autocmd Filetype python setlocal completeopt=menuone,preview
    " Disable automatically select the first entry that pops up
    let g:jedi#popup_select_first = 0
    " Disable automatically starts completion upon typing a period
    let g:jedi#popup_on_dot = 0
    " For quickrun
    let g:jedi#rename_command = '<Leader>R'
    " For gundo
    let g:jedi#goto_assignments_command = '<Leader>G'
    let g:jedi#completions_command = "<C-N>"
  endfunction "}}}
  call neobundle#untap()
endif
"}}}

" osyo-manga/vim-anzu search{{{
if neobundle#tap('vim-anzu')
  call neobundle#config({
        \   'autoload' : {
        \     'mappings' : ['<Plug>(anzu-'],
        \   }
        \ })
  nmap n <Plug>(anzu-n)zzzv
  nmap N <Plug>(anzu-N)zzzv
  nmap * <Plug>(anzu-star-with-echo);n
  nmap # <Plug>(anzu-sharp-with-echo)

  " Clear hit count when nokeyinput, move window, or move tab
  Autocmd CursorHold,CursorHoldI,WinLeave,TabLeave
      \   * call anzu#clear_search_status()
  call neobundle#untap()
endif
"}}}

" Shougo/neosnippet.vim "{{{
if neobundle#tap('neosnippet.vim')
    call neobundle#config({
        \   'autoload' : {
        \     'insert' : 1,
        \     'filetypes' : 'neosnippet',
        \     'unite_sources' : [
        \       'snippet', 'neosnippet/user', 'neosnippet/runtime'
        \       ],
        \   }
        \ })

    function! neobundle#tapped.hooks.on_source(bundle) "{{{
        " For snippet_complete marker.
        if has('conceal')
            set conceallevel=2 concealcursor=i
        endif
        " Enable snipMate compatibility feature.
        let g:neosnippet#enable_snipmate_compatibility = 1
        " Remove snippets marker automatically
        Autocmd InsertLeave * :NeoSnippetClearMarkers
    endfunction "}}}

    " SuperTab like snippets behavior.
    imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)"
                \: pumvisible() ? "\<C-n>" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
                \ "\<Plug>(neosnippet_expand_or_jump)"
                \: "\<TAB>"

    " Plugin key-mappings.
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    xmap <C-l> <Plug>(neosnippet_start_unite_snippet_target)

    call neobundle#untap()
endif
"}}}

" scrooloose/syntastic {{{
if neobundle#tap('syntastic')
    " Config {{{
    call neobundle#config({
        \   'autoload' : {
        \     'insert' : 1,
        \   }
        \ })
    " }}}
    function! neobundle#tapped.hooks.on_source(bundle) "{{{
        let g:syntastic_python_checkers=['pylint', 'flake8']
    endfunction "}}}
    call neobundle#untap()
endif
" }}}

" godlygeek/tabular {{{
if neobundle#tap('tabular')
    " Config {{{
    call neobundle#config({
        \   'autoload' : {
        \     'insert' : 1,
        \   }
        \ })
    nmap <Leader>a= :Tabularize /=<CR>
    vmap <Leader>a= :Tabularize /=<CR>
    nmap <Leader>a: :Tabularize /:\zs<CR>
    vmap <Leader>a: :Tabularize /:\zs<CR>
    " }}}
    call neobundle#untap()
endif
" }}}

" ========================================
" RSI Prevention - keyboard remaps
" ========================================
" Certain things we do every day as programmers stress
" out our hands. For example, typing underscores and
" dashes are very common, and in position that require
" a lot of hand movement. Vim to the rescue
"
" Now using the middle finger of either hand you can type
" underscores with apple-k or apple-d, and add Shift
" to type dashes
imap <silent> <D-k> _
imap <silent> <D-d> _
imap <silent> <D-K> -
imap <silent> <D-D> -

" Use Q to intelligently close a window
" (if there are multiple windows into the same buffer)
" or kill the buffer entirely if it's the last window looking into that buffer
function! CloseWindowOrKillBuffer()
  let number_of_windows_to_this_buffer =
        \ len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

  " We should never bdelete a nerd tree
  if matchstr(expand("%"), 'NERD') == 'NERD'
    wincmd c
    return
  endif

  if number_of_windows_to_this_buffer > 1
    wincmd c
  else
    bdelete
  endif
endfunction

nnoremap <silent> Q :call CloseWindowOrKillBuffer()<CR>

"------------------------------------
" vim: expandtab softtabstop=2 shiftwidth=2 foldmethod=marker
